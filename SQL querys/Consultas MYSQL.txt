# Mostrar bases de datos
SHOW DATABASES

# Crear base de datos
CREATE DATABASE curso_sql

CREATE DATABASE IF NOT EXISTS curso_sql

# Borrar base de datos
DROP DATABASE curso_sql

DROP DATABASE IF EXISTS curso_sql

# Crear usuario a la base de datos (nombre@servidor IDENTIFIED BY 'contraseña')
CREATE USER 'jesus'@'localhost' IDENTIFIED BY '1234'

# Asignar privilegios a usuarios (asignar todos los privilegios a un usuario)
GRANT ALL PRIVILEGES ON curso_sql TO 'jesus'@'localhost'

# Actualizar privilegios
FLUSH PRIVILEGES

# Mostrar privilegios de un usuario
SHOW GRANTS FOR 'jesus'@'localhost'

# Revocar privilegios a un usuario (revoca todos los privilegios a un usuario)
REVOKE ALL, GRANT OPTION FROM 'jesus'@'localhost'

# Eliminar usuario
DROP USER 'jesus'@'localhost'

# Seleccionar base de datos
USE curso_sql

# Mostrar tablas de la base de datos
SHOW TABLES

# Mostrar un resumen de la base de datos
DESCRIBE curso_sql

# Crear tabla en una base de datos
CREATE TABLE usuarios(
	usuario_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	nombre VARCHAR(50) NOT NULL,
	apellido VARCHAR(50) NOT NULL,
	correo VARCHAR(50) UNIQUE,
	direccion VARCHAR(100) DEFAULT 'Sin dirección',
	edad INT DEFAULT 0
)

# Agregar una columna a una tabla
ALTER TABLE usuarios ADD COLUMN nacimiento VARCHAR(15)

# Cambiar el tipo de dato de una columna
ALTER TABLE usuarios MODIFY nacimiento DATE

# Renombrar columna de una tabla
ALTER TABLE usuarios RENAME COLUMN nacimiento TO cumpleaños

# Eliminar columna de una tabla
ALTER TABLE usuarios DROP COLUMN nacimiento

# Eliminar tabla
DROP TABLE usuarios

# Insertar datos en una tabla
INSERT INTO usuarios VALUES(0, 'Jesus', 'Ovalles', 'jesus@gmail.com', 'chivacoa', 27)

INTERT INTO usuarios (nombre, apellido, correo, direccion, edad) VALUES 
			('Jesus', 'Ovalles', 'jesus@gmail.com', 'chivacoa', 27),
			('Jose', 'Torres', 'jose@gmail.com', 'chivacoa', 30)
		       

# Seleccionar todas las columnas de una tabla
SELECT * FROM usuarios

# Seleccionar columnas especificas de una tabla
SELECT nombre, apellido FROM usuarios

# Mostrar la cantidad de registros de una tabla
SELECT COUNT(*) AS total_usuarios FROM usuarios

# Mostrar registros filtrados por  un condicional
SELECT * FROM usuarios WHERE nombre = 'jesus' # Busca los nombres que sean jesus

SELECT * FROM usuarios WHERE NOT nombre = 'jesus' # Busca los nombres que no sean jesus

SELECT * FROM usuarios WHERE nombre IN ('jesus', 'jose') # Busca los nombres jesus y jose

SELECT * FROM usuarios WHERE apellido LIKE 'M%' # Busca los apellidos que comiencen por M

SELECT * FROM usuarios WHERE correo NOT LIKE '%@gmail.com' # Busca los correos que no terminen en @gmail.com

SELECT * FROM usuarios WHERE edad = 23 # busca las edades de 23

SELECT * FROM usuarios WHERE edad != 23 # busca las edades distintas de 23 (<>)

SELECT * FROM usuarios WHERE edad >= 23 # busca las edades mayores o iguales que 23

SELECT * FROM usuarios WHERE edad >= 23 AND edad <= 25 # busca las edades entre 23 y 25

SELECT * FROM usuarios WHERE nombre = 'jesus' OR nombre = 'jose'  # Busca los nombres que sean jesus o jose

# Actualizar el correo y la dirección del usuario_id = 3
UPDATE usuarios SET correo = 'jesus@gmail.com', direccion = 'chivacoa'
WHERE usuario_id = 3

# Borrar el registro cuando el usuario_id = 6
DELETE FROM usuarios WHERE usuario_id = 6

# Truncar tabla
TRUNCATE TABLE usuarios

# Crear columna calculada que sea la multiplicación de la cantidad por el precio
SELECT nombre, precio, cantidad, (precio * cantidad) AS ganancia FROM productos

# Mostrar el precio máximo por producto
SELECT nombre, MAX(precio) AS precio_maximo FROM productos
GROUP BY nombre

# Mostrar la cantidad total por producto
SELECT nombre, COUNT(*) AS total FROM productos
GROUP BY nombre

# Mostrar la cantidad total por producto cuando su pais es colombia
SELECT nombre, COUNT(*) AS total FROM productos WHERE pais = 'colombia'
GROUP BY nombre

# Mostrar la cantidad total por producto cuando los productos sean mayores a 4 y su pais es colombia
SELECT nombre, COUNT(*) AS total FROM productos WHERE pais = 'colombia'
GROUP BY nombre HAVING total > 4

# Mostrar registros sin duplicados
SELECT DISTINCT correo FROM usuarios

# Ordenar nombres de forma ascendente
SELECT * FROM usuarios ORDER BY nombre ASC (DESC)

# Mostrar los registros donde el precio este entre 500 y 1000
SELECT * FROM productos WHERE precio BETWEEN 500 AND 1000

# Mostrar los registros que coincidan con la expresion regular
SELECT * FROM productos WHERE nombre REGEXP '[a-z]' # busca lo que contenga letras

SELECT * FROM productos WHERE nombre REGEXP '[0-9]' # busca lo que contenga numeros

# Visualizar indices de una tabla
SHOW INDEX FROM usuarios

# Crear tabla con índice (el indice ayuda a que las busquedas se realicen se forma mas rapida)
CREATE TABLE usuarios(
	usuario_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	nombre VARCHAR(50) NOT NULL,
	apellido VARCHAR(50) NOT NULL,
	correo VARCHAR(50) UNIQUE,
	direccion VARCHAR(100) DEFAULT 'Sin dirección',
	edad INT DEFAULT 0,
	INDEX i_apellido (apellido)
)

# Realizar SELECT a tabla con indice
SELECT * FROM usuarios WHERE apellido = 'ovalles'

# Crear tabla con llaves foraneas
CREATE TABLE usuarios(
	usuario_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	nombre VARCHAR(50) NOT NULL,
	apellido VARCHAR(50) NOT NULL,
	correo VARCHAR(50) UNIQUE,
	direccion VARCHAR(100) DEFAULT 'Sin dirección',
	edad INT DEFAULT 0,
	FOREING KEY (pais) REFERENCES pais(pais_id)
)

# Realización de left join (trae todo de la izquierda y lo que coincida de la derecha)
SELECT * FROM caballeros c
	LEFT JOIN signos s
	ON c.signo = s.signo_id

# Realización de right join (trae todo de la derecha y lo que coincida de la izquierda)
SELECT * FROM caballeros c
	RIGHT JOIN signos s
	ON c.signo = s.signo_id 

# Realización de inner join (trae lo que coincida de ambas tablas)
SELECT * FROM caballeros c
	INNER JOIN signos s
	ON c.signo = s.signo_id

# Realización de full join (trae lo que coincida o no de ambas tablas)
SELECT * FROM caballeros c
	LEFT JOIN signos s
	ON c.signo = s.signo_id
UNION
SELECT * FROM caballeros c
	RIGHT JOIN signos s
	ON c.signo = s.signo_id

# Traer campos de varias tablas
SELECT c.caballero, a.armadura, s.signo 
FROM caballeros c
LEFT JOIN armaduras a ON c.armadura = a.armadura_id
LEFT JOIN signo s ON c.signo = s.signo_id

# Mostrar la cantidad de caballeros por signo usando subconsulta
SELECT signo,
       (SELECT COUNT(*) FROM caballeros c WHERE c.signo = s.signo_id) AS
       total_caballeros
FROM signo s

# Crear una vista
CREATE VIEW vista_caballero AS
	SELECT c.caballero, a.armadura, s.signo 
	FROM caballeros c
	LEFT JOIN armaduras a ON c.armadura = a.armadura_id
	LEFT JOIN signo s ON c.signo = s.signo_id

SELECT * FROM vista_caballero

# Crear procedimiento almacenado
DELIMITER //

CREATE PROCEDURE sp_asignar_servicio(
	IN i_suscripcion INT UNSIGNED,
	IN i_nombre VARCHAR(30),
	IN i_correo VARCHAR(50),
	IN i_tarjeta VARCHAR(16),
	OUT o_respuesta VARCHAR(50))

	BEGIN
		DECLARE existe_correo INT DEFAULT 0;
		DECLARE cliente_id INT DEFAULT 0;
		DECLARE tarjeta_id INT DEFAULT 0;

		START TRANSACTION;
	
			SELECT COUNT(*) INTO existe_correo
			   FROM clientes
			   WHERE correo = i_correo;
		
			IF existe_correo <> 0 THEN
				
			   SELECT 'Tu correo ya ha sido registrado' INTO o_respuesta;

			ELSE

			   INSERT INTO clientes VALUES (0, i_nombre, i_correo);
			   SELECT LAST_INSERT_ID() INTO cliente_id;
			   
			   INSERT INTO tarjetas VALUES (0, cliente_id, AES_ESCRYPT(i_tarjeta, cliente_id));
			   SELECT LAST_INSERT_ID() INTO tarjeta_id;

			   INSERT INTO servicios VALUES (0, cliente_id, tarjeta_id, i_suscripcion);
			
			   SELECT 'Servicio asignado con exito' INTO o_respuesta;

			END IF;
		COMMIT

	END //

DELIMITER;

CALL sp_asignar_servicios(3, 'jesus', 'jesus@comware.com', '1234567890123456', @res);
SELECT @res;

# Crear disparador que cuando se inserte un registro en la tabla cliente, se genere un registro en la tabla actividad_clientes
DELIMITER //

CREATE TRIGGER tg_actividad_clientes
	AFTER INSERT
	ON clientes
	FOR EACH ROW

	BEGIN

		INSERT INTO actividad_clientes VALUES (0, NEW.cliente_id, NOW())

	END //

DELIMITER;

# Hacer un join que muestre todas las columnas de ambas tablas

SELECT be.*, br.*
FROM beer be
INNER JOIN brand br ON beer.brandID = brand.brandID